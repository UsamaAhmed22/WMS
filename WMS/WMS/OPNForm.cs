using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace WMS
{
    public partial class OPNForm : Form
    {
        private readonly string connectTo_WMS_DB = @"Data Source=(LocalDB)\MSSQLLocalDB;AttachDbFilename=|DataDirectory|\WMS.mdf;Integrated Security=True";

        public OPNForm()
        {
            InitializeComponent();


            PopulateCompanyComboBox();
            PopulateVehicleComboBox();
            PopulateWarehouseComboBox();
        }

        private void Btn_GoBack_Click(object sender, EventArgs e)
        {
            _ = new WMS_Manager
            {
                Visible = true
            };
            this.Close();
        }

        private void OPNForm_Load(object sender, EventArgs e)
        {
            cb_OPN_Status.Items.Add("At The Way");
            cb_OPN_Status.Items.Add("At The Dock");
            cb_OPN_Status.Items.Add("At Order Placing");
            cb_OPN_Status.Items.Add("Order Complete");
        }




        // Bill ID generated by this button and diplay in the text box
        private void Btn_generateOrder_ID_Click(object sender, EventArgs e)
        {
            if (txt_OrderID.Text != "")
            {
                MessageBox.Show("Please! Commit the Previous Information.");
                return;
            }
            try
            {
                using (SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB))
                {
                    sqlCon.Open();

                    string insertQuery = "INSERT INTO ProductINFO.Bill DEFAULT VALUES; SELECT SCOPE_IDENTITY();";
                    SqlCommand cmd = new SqlCommand(insertQuery, sqlCon);

                    int generatedBillID = Convert.ToInt32(cmd.ExecuteScalar());

                    txt_OrderID.Text = generatedBillID.ToString();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred: " + ex.Message);
            }
        }

        // ADD the new product to BillDetails table
        private void Btn_add_order_Click(object sender, EventArgs e)
        {
            // Validation checks for input fields...
            if (!int.TryParse(txt_OrderID.Text, out int OrderID) || OrderID <= 0)
            {
                MessageBox.Show("Invalid Order ID.");
                return;
            }

            if (cb_product_ID.Text == "")
            {
                MessageBox.Show("Invalid Product Name.");
                return;
            }

            if (!int.TryParse(txt_product_quantity.Text, out int quantity) || quantity <= 0)
            {
                MessageBox.Show("Invalid Quantity.");
                return;
            }

            if (!double.TryParse(txt_extraCharges.Text, out double extraCharges) || extraCharges < 0)
            {
                MessageBox.Show("Invalid Extra Charges.");
                return;
            }

            using (SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB))
            {

                int productID = ProductNametoID(cb_product_ID.Text);

                double AreaOccupy = (GetProductArea(productID)) * quantity;

                try
                {
                    sqlCon.Open();

                    string query = @"INSERT INTO ProductINFO.BillDetails (BillID, ProductID, Quantity, ExtraCharges, OccupyArea)
                             VALUES (@BillID, @ProductID, @Quantity, @ExtraCharges,@AreaOccupy)";

                    SqlCommand cmd = new SqlCommand(query, sqlCon);
                    cmd.Parameters.AddWithValue("@BillID", OrderID);
                    cmd.Parameters.AddWithValue("@ProductID", productID);
                    cmd.Parameters.AddWithValue("@Quantity", quantity);
                    cmd.Parameters.AddWithValue("@ExtraCharges", extraCharges);
                    cmd.Parameters.AddWithValue("@AreaOccupy", AreaOccupy);

                    int rowsAffected = cmd.ExecuteNonQuery();

                    if (rowsAffected > 0)
                    {
                        MessageBox.Show("Product added to BillDetails successfully.");
                        ClearProductDetailsFields(); // Clear the input fields after successful addition
                        DisplayProductsInGridView(OrderID); // Update DataGridView with added product
                    }
                    else
                    {
                        MessageBox.Show("Failed to add product to BillDetails.");
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show("An error occurred: " + ex.Message);
                }
            }
        }

        private int ProductNametoID(string productName)
        {
            int productID = 0;  // Initialize the variable

            SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);

            try
            {
                sqlCon.Open();

                string query = "SELECT ProductID FROM ProductINFO.Products WHERE Name = @name";
                SqlCommand cmd = new SqlCommand(query, sqlCon);
                cmd.Parameters.AddWithValue("@name", productName);
                SqlDataReader reader = cmd.ExecuteReader();

                if (reader.Read()) // Check if there's a row returned
                {
                    productID = Convert.ToInt32(reader["ProductID"]); // Assign the retrieved ID
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred while fetching Product data: " + ex.Message);
            }
            finally
            {
                sqlCon.Close();
            }

            return productID;
        }

        private float GetProductArea(int productID)
        {
            float area = 0;

            string connectionString = connectTo_WMS_DB; // Replace with your connection string
            string query = "SELECT AreaCmSq FROM ProductINFO.Products WHERE ProductID = @ProductID";

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@ProductID", productID);

                    try
                    {
                        connection.Open();
                        var result = command.ExecuteScalar();
                        if (result != null && result != DBNull.Value)
                        {
                            area = Convert.ToSingle(result);
                        }
                    }
                    catch (Exception ex)
                    {
                        // Handle exception
                        Console.WriteLine("An error occurred: " + ex.Message);
                    }
                }
            }

            return area;
        }




        //  function for VIEW product to Bill ID and Product ID from Bill Details Table
        private void Btn_View_order_Click(object sender, EventArgs e)
        {
            // Validate Order ID input
            if (!int.TryParse(txt_OrderID.Text, out int OrderID))
            {
                MessageBox.Show("Invalid Order ID.");
                return;
            }

            // Validate Product ID input
            if (cb_product_ID.Text == "")
            {
                MessageBox.Show("Invalid Product Name.");
                return;
            }

            try
            {
                ViewProductDetails(OrderID, ProductNametoID(cb_product_ID.Text));
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred: " + ex.Message);
            }
        }

        // Function to view product details
        private void ViewProductDetails(int OrderID, int productID)
        {
            try
            {
                using (SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB))
                {
                    sqlCon.Open();

                    string query = @"SELECT Quantity, ExtraCharges FROM ProductINFO.BillDetails 
                             WHERE BillID = @BillID AND ProductID = @ProductID";

                    using (SqlCommand cmd = new SqlCommand(query, sqlCon))
                    {
                        cmd.Parameters.AddWithValue("@BillID", OrderID);
                        cmd.Parameters.AddWithValue("@ProductID", productID);

                        using (SqlDataReader reader = cmd.ExecuteReader())
                        {
                            if (reader.Read())
                            {
                                // Display the product details in text boxes
                                txt_product_quantity.Text = reader["Quantity"].ToString();
                                txt_extraCharges.Text = reader["ExtraCharges"].ToString();
                            }
                            else
                            {
                                MessageBox.Show("Product details not found.");
                                ClearProductDetailsFields(); // Clear text boxes if product details are not found
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred: " + ex.Message);
            }
        }






        // function for UPDATE product Bill Id and Product ID from Bill details table
        private void Btn_Update_order_Click(object sender, EventArgs e)
        {
            if (!int.TryParse(txt_OrderID.Text, out int billID) || billID <= 0)
            {
                MessageBox.Show("Invalid OPN ID.");
                return;
            }

            if (cb_product_ID.Text == "")
            {
                MessageBox.Show("Invalid Product Name.");
                return;
            }

            if (!int.TryParse(txt_product_quantity.Text, out int quantity) || quantity <= 0)
            {
                MessageBox.Show("Invalid Quantity.");
                return;
            }

            if (!double.TryParse(txt_extraCharges.Text, out double extraCharges) || extraCharges < 0)
            {
                MessageBox.Show("Invalid Extra Charges.");
                return;
            }

            try
            {
                if (UpdateProductInBillDetails(billID, ProductNametoID(cb_product_ID.Text), quantity, extraCharges))
                {
                    MessageBox.Show("Product updated successfully.");
                    DisplayProductsInGridView(billID); // Update DataGridView after updating
                }
                else
                {
                    MessageBox.Show("Failed to update product in BillDetails.");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred: " + ex.Message);
            }
        }

        private bool UpdateProductInBillDetails(int OrderID, int productID, int quantity, double extraCharges)
        {
            try
            {
                double AreaOccupy = (GetProductArea(productID)) * quantity;

                using (SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB))
                {
                    sqlCon.Open();

                    string query = @"UPDATE ProductINFO.BillDetails 
                             SET Quantity = @Quantity, ExtraCharges = @ExtraCharges ,OccupyArea = @AreaOccupy
                             WHERE BillID = @BillID AND ProductID = @ProductID";

                    using (SqlCommand cmd = new SqlCommand(query, sqlCon))
                    {
                        cmd.Parameters.AddWithValue("@Quantity", quantity);
                        cmd.Parameters.AddWithValue("@ExtraCharges", extraCharges);
                        cmd.Parameters.AddWithValue("@BillID", OrderID);
                        cmd.Parameters.AddWithValue("@ProductID", productID);
                        cmd.Parameters.AddWithValue("@AreaOccupy", AreaOccupy);

                        int rowsAffected = cmd.ExecuteNonQuery();

                        return rowsAffected > 0;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred: " + ex.Message);
                return false;
            }
        }






        // function for DELETE product to Bill ID and Product ID From Bill Details 
        private void Btn_Delete_order_Click(object sender, EventArgs e)
        {
            if (!int.TryParse(txt_OrderID.Text, out int OrderID))
            {
                MessageBox.Show("Invalid Order ID.");
                return;
            }

            if (cb_product_ID.Text == "")
            {
                MessageBox.Show("Invalid Product Name.");
                return;
            }

            try
            {
                if (DeleteProductFromBillDetails(OrderID, ProductNametoID(cb_product_ID.Text)))
                {
                    MessageBox.Show("Product deleted successfully.");
                    DisplayProductsInGridView(OrderID); // Update DataGridView after deletion
                }
                else
                {
                    MessageBox.Show("Failed to delete product from BillDetails.");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred: " + ex.Message);
            }
        }

        private bool DeleteProductFromBillDetails(int OrderID, int productID)
        {
            try
            {
                using (SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB))
                {
                    sqlCon.Open();

                    string query = @"DELETE FROM ProductINFO.BillDetails 
                             WHERE BillID = @BillID AND ProductID = @ProductID";

                    using (SqlCommand cmd = new SqlCommand(query, sqlCon))
                    {
                        cmd.Parameters.AddWithValue("@BillID", OrderID);
                        cmd.Parameters.AddWithValue("@ProductID", productID);

                        int rowsAffected = cmd.ExecuteNonQuery();

                        return rowsAffected > 0;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred: " + ex.Message);
                return false;
            }
        }




        // Helper function to display products in DataGridView after adding to BillDetails
        private void DisplayProductsInGridView(int OrderID)
        {
            try
            {
                using (SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB))
                {
                    sqlCon.Open();

                     string query = @"SELECT P.Name AS ProductName, BD.Quantity, BD.ExtraCharges, BD.TotalStorageCharges
                                FROM ProductINFO.BillDetails BD
                                INNER JOIN ProductINFO.Products P ON BD.ProductID = P.ProductID
                                WHERE BD.BillID = @BillID";

                    using (SqlCommand cmd = new SqlCommand(query, sqlCon))
                    {
                        cmd.Parameters.AddWithValue("@BillID", OrderID);

                        SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                        DataTable dataTable = new DataTable();
                        adapter.Fill(dataTable);

                        grid_View_OPN_Order.DataSource = dataTable; // Assuming grid_View_OPN_Order is your DataGridView name
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred while fetching products: " + ex.Message);
            }
        }

        // Helper function to clear input fields after adding product to BillDetails
        private void ClearProductDetailsFields()
        {
            cb_product_ID.Text = "";
            txt_product_quantity.Text = "";
            txt_extraCharges.Text = "";
        }








        // <-------------------------- Functions for populating the results from dataabse -------------------------------->


        // these methods for fetchin results from database in the realtive combo boxes
        private void PopulateComboBox(ComboBox comboBox, string query)
        {
            SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);

            try
            {
                sqlCon.Open();

                SqlCommand cmd = new SqlCommand(query, sqlCon);
                SqlDataReader reader = cmd.ExecuteReader();

                while (reader.Read())
                {
                    comboBox.Items.Add(reader[0].ToString());
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"An error occurred while fetching data: {ex.Message}");
            }
            finally
            {
                sqlCon.Close();
            }
        }

        private void PopulateCompanyComboBox()
        {
            string query = "SELECT DISTINCT Name FROM ShipmentINFO.Company";
            PopulateComboBox(cb_company_ID, query);
        }

        private void PopulateVehicleComboBox()
        {
            string query = "SELECT DISTINCT RegistrationNo FROM ShipmentINFO.Vehicle";
            PopulateComboBox(cb_vehicle_ID, query);
        }

        private void PopulateWarehouseComboBox()
        {
            string query = "SELECT DISTINCT Name FROM WareHouseINFO.Warehouse";
            PopulateComboBox(cb_warehouse_ID, query);
        }




        private void Cb_warehouse_ID_SelectedIndexChanged_1(object sender, EventArgs e)
        {
            if (cb_warehouse_ID.SelectedItem != null)
            {
                string warehouseName = cb_warehouse_ID.Text;
                int selectedWarehouseID = 0;  // Initialize the variable

                SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);

                try
                {
                    sqlCon.Open();

                    string query = "SELECT WarehouseID FROM WareHouseINFO.Warehouse WHERE Name = @name";
                    SqlCommand cmd = new SqlCommand(query, sqlCon);
                    cmd.Parameters.AddWithValue("@name", warehouseName);
                    SqlDataReader reader = cmd.ExecuteReader();

                    // Check if the reader has rows
                    if (reader.HasRows)
                    {
                        // Assuming the query returns a single result for the warehouse name
                        reader.Read();
                        selectedWarehouseID = Convert.ToInt32(reader["WarehouseID"]); // Assign the retrieved ID
                    }

                    reader.Close();
                }
                catch (Exception ex)
                {
                    MessageBox.Show("An error occurred while fetching Warehouse data: " + ex.Message);
                }
                finally
                {
                    sqlCon.Close();
                }

                PopulateDockComboBox(selectedWarehouseID);
            }
        }

        // for fetching related warehouse dock
        private void PopulateDockComboBox(int warehouseID)
        {
            cb_dock_ID.Items.Clear(); // Clear existing items

            SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);

            try
            {
                sqlCon.Open();

                string query = "SELECT Name FROM WareHouseINFO.Dock WHERE WarehouseID = @WarehouseID";
                SqlCommand cmd = new SqlCommand(query, sqlCon);
                cmd.Parameters.AddWithValue("@WarehouseID", warehouseID);
                SqlDataReader reader = cmd.ExecuteReader();

                while (reader.Read())
                {
                    cb_dock_ID.Items.Add(reader["Name"].ToString());
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred while fetching dock data: " + ex.Message);
            }
            finally
            {
                sqlCon.Close();
            }
        }





        // for fetching realted company products
        private void Cb_company_ID_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cb_company_ID.SelectedItem != null )
            {

                string selectedCompanyID = cb_company_ID.Text;

                // Fetch products based on the selected company ID
                PopulateProductComboBox(selectedCompanyID);
            }
        }

        private void PopulateProductComboBox(string companyName)
        {
            SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);

            try
            {
                sqlCon.Open();

                // Fetch products based on the selected company ID
                string query = "SELECT Name FROM ProductINFO.Products WHERE CompanyName = @companyName";
                SqlCommand cmd = new SqlCommand(query, sqlCon);
                cmd.Parameters.AddWithValue("@companyName", companyName);

                SqlDataReader reader = cmd.ExecuteReader();

                while (reader.Read())
                {
                    cb_product_ID.Items.Add(reader["Name"].ToString());
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred while fetching product data: " + ex.Message);
            }
            finally
            {
                sqlCon.Close();
            }
            // This is for selecting the output from combo box and their respective products of the selected company
        }




        // converting to Names From taken IDs
        private void CompanyNameFromID(int companyID)
        {
            SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);

            try
            {
                sqlCon.Open();

                string Query = @"SELECT Name FROM ShipmentINFO.Company WHERE CompanyID = @companyID";


                SqlCommand cmd = new SqlCommand(Query, sqlCon);
                cmd.Parameters.AddWithValue("@companyID", companyID);

                SqlDataReader reader = cmd.ExecuteReader();

                if (reader.Read())
                {
                    cb_company_ID.Text = reader["Name"].ToString();
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred: " + ex.Message);
            }
            finally
            {
                sqlCon.Close();
            }
        }
        private void VehicleNameFromID(int vehicleID)
        {
            SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);

            try
            {
                sqlCon.Open();

                string Query = @"SELECT RegistrationNo FROM ShipmentINFO.Vehicle WHERE VehicleID = @vehicleID";


                SqlCommand cmd = new SqlCommand(Query, sqlCon);
                cmd.Parameters.AddWithValue("@vehicleID", vehicleID);

                SqlDataReader reader = cmd.ExecuteReader();

                if (reader.Read())
                {
                    cb_vehicle_ID.Text = reader["RegistrationNo"].ToString();
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred: " + ex.Message);
            }
            finally
            {
                sqlCon.Close();
            }
        }
        private void WarehouseNameFromID(int warehouseID)
        {
            SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);

            try
            {
                sqlCon.Open();

                string Query = @"SELECT Name FROM WarehouseINFO.Warehouse WHERE WarehouseID = @warehouseID";


                SqlCommand cmd = new SqlCommand(Query, sqlCon);
                cmd.Parameters.AddWithValue("@warehouseID", warehouseID);

                SqlDataReader reader = cmd.ExecuteReader();

                if (reader.Read())
                {
                    cb_warehouse_ID.Text = reader["Name"].ToString();
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred: " + ex.Message);
            }
            finally
            {
                sqlCon.Close();
            }
        }
        private void DockNameFromID(int dockID)
        {
            SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);

            try
            {
                sqlCon.Open();

                string Query = @"SELECT Name FROM WarehouseINFO.Dock WHERE DockID = @dockID";


                SqlCommand cmd = new SqlCommand(Query, sqlCon);
                cmd.Parameters.AddWithValue("@dockID", dockID);

                SqlDataReader reader = cmd.ExecuteReader();

                if (reader.Read())
                {
                    cb_dock_ID.Text = reader["Name"].ToString();
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred: " + ex.Message);
            }
            finally
            {
                sqlCon.Close();
            }
        }




        // converting to ID from names

        private int CompanyNametoID(string companyName)
        {
            int companyID = 0;  // Initialize the variable

            SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);

            try
            {
                sqlCon.Open();

                string query = "SELECT CompanyID FROM ShipmentINFO.Company WHERE Name = @name";
                SqlCommand cmd = new SqlCommand(query, sqlCon);
                cmd.Parameters.AddWithValue("@name", companyName);
                SqlDataReader reader = cmd.ExecuteReader();

                if (reader.Read()) // Check if there's a row returned
                {
                    companyID = Convert.ToInt32(reader["CompanyID"]); // Assign the retrieved ID
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred while fetching Company data: " + ex.Message);
            }
            finally
            {
                sqlCon.Close();
            }

            return companyID;
        }
        private int VehicleNametoID(string vehicleReg)
        {
            int VehicleID = 0;  // Initialize the variable

            SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);

            try
            {
                sqlCon.Open();

                string query = "SELECT VehicleID FROM ShipmentINFO.Vehicle WHERE RegistrationNo = @vehicleReg";
                SqlCommand cmd = new SqlCommand(query, sqlCon);
                cmd.Parameters.AddWithValue("@vehicleReg", vehicleReg);
                SqlDataReader reader = cmd.ExecuteReader();

                if (reader.Read()) // Check if there's a row returned
                {
                    VehicleID = Convert.ToInt32(reader["VehicleID"]); // Assign the retrieved ID
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred while fetching Vehicle data: " + ex.Message);
            }
            finally
            {
                sqlCon.Close();
            }

            return VehicleID;
        }
        private int WarehouseNametoID(string warehouseName)
        {
            int warehouseID = 0;  // Initialize the variable

            SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);

            try
            {
                sqlCon.Open();

                string query = "SELECT WarehouseID FROM WarehouseINFO.Warehouse WHERE Name = @warehouseName";
                SqlCommand cmd = new SqlCommand(query, sqlCon);
                cmd.Parameters.AddWithValue("@warehouseName", warehouseName);
                SqlDataReader reader = cmd.ExecuteReader();

                if (reader.Read()) // Check if there's a row returned
                {
                    warehouseID = Convert.ToInt32(reader["WarehouseID"]); // Assign the retrieved ID
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred while fetching Warehouse data: " + ex.Message);
            }
            finally
            {
                sqlCon.Close();
            }

            return warehouseID;
        }
        private int DockNametoID(string dockName)
        {
            int dockID = 0;  // Initialize the variable

            SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);

            try
            {
                sqlCon.Open();

                string query = "SELECT DockID FROM WarehouseINFO.Dock WHERE Name = @dockName";
                SqlCommand cmd = new SqlCommand(query, sqlCon);
                cmd.Parameters.AddWithValue("@dockName", dockName);
                SqlDataReader reader = cmd.ExecuteReader();

                if (reader.Read()) // Check if there's a row returned
                {
                    dockID = Convert.ToInt32(reader["DockID"]); // Assign the retrieved ID
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred while fetching Dock data: " + ex.Message);
            }
            finally
            {
                sqlCon.Close();
            }

            return dockID;
        }





        private void Btn_OPN_Add_Click(object sender, EventArgs e)
        {

            if (!int.TryParse(txt_OrderID.Text, out int bill) || bill <= 0)
            {
                MessageBox.Show("Please! Provide Valid OPN ID.");
                return;
            }
            if (cb_company_ID.Text == "")
            {
                MessageBox.Show("Please! Provide Company Name.");
                return;
            }
            if (cb_warehouse_ID.Text == "")
            {
                MessageBox.Show("Please! Provide Warehouse Name.");
                return;
            }
            if (cb_dock_ID.Text == "")
            {
                MessageBox.Show("Please! Provide Dock Name.");
                return;
            }
            if (cb_vehicle_ID.Text == "")
            {
                MessageBox.Show("Please! Provide Vehicle Registration No.");
                return;
            }


            string CompanyName = cb_company_ID.Text;
            string WarehouseName = cb_warehouse_ID.Text;
            string VehicelName = cb_vehicle_ID.Text;
            string dockName = cb_dock_ID.Text;



            int companyID = CompanyNametoID(CompanyName);
            int warehouseID = WarehouseNametoID(WarehouseName);
            int vehicleID = VehicleNametoID(VehicelName);
            int dockID = DockNametoID(dockName);

            int OrderID = Convert.ToInt32(txt_OrderID.Text);
            DateTime DepartureDate = Date_OPN.Value.Date;

            

            string shipmentStatus = "Departure"; // Set the shipment status
            string status = "At The Way"; // Set the status

            using (SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB))
            {
                try
                {
                    sqlCon.Open();

                    string query = @"INSERT INTO ShipmentINFO.Shipment 
                            (CompanyID, WarehouseID, VehicleID, BillID, Date, ShipmentStatus, Status, DockID) 
                            VALUES (@CompanyID, @WarehouseID, @VehicleID, @BillID, @Date, @ShipmentStatus, @Status, @DockID)";

                    using (SqlCommand cmd = new SqlCommand(query, sqlCon))
                    {
                        cmd.Parameters.AddWithValue("@CompanyID", companyID);
                        cmd.Parameters.AddWithValue("@WarehouseID", warehouseID);
                        cmd.Parameters.AddWithValue("@VehicleID", vehicleID);
                        cmd.Parameters.AddWithValue("@BillID", OrderID);
                        cmd.Parameters.AddWithValue("@Date", DepartureDate);
                        cmd.Parameters.AddWithValue("@ShipmentStatus", shipmentStatus);
                        cmd.Parameters.AddWithValue("@Status", status);
                        cmd.Parameters.AddWithValue("@DockID", dockID);

                        int rowsAffected = cmd.ExecuteNonQuery();

                        if (rowsAffected > 0)
                        {
                            MessageBox.Show("OPN details added successfully.");
                            ClearShipmentFields(); // Clear input fields after successful addition
                        }
                        else
                        {
                            MessageBox.Show("Failed to add OPN details.");
                        }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show("An error occurred: " + ex.Message);
                }
            }
        }

        private void ClearShipmentFields()
        {
            cb_company_ID.Text = "";
            cb_warehouse_ID.Text = "";
            cb_vehicle_ID.Text = "";
            txt_OrderID.Text = "";
            Date_OPN.Value = DateTime.Now;
            cb_dock_ID.Text = "";
            cb_OPN_Status.Text = "";
            grid_View_OPN_Order.DataSource = null;
        }

        private void Btn_OPN_View_Click(object sender, EventArgs e)
        {
            int companyID, VehicelID, WarehouseID, DockID;

            if (!int.TryParse(txt_OPN_ID.Text, out int opnNo) || opnNo <= 0)
            {
                MessageBox.Show("Please! Provide Valid ID.");
                return;
            }

            int shipmentID = Convert.ToInt32(txt_OPN_ID.Text);
            

            using (SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB))
            {
                try
                {
                    sqlCon.Open();

                    string query = @"SELECT CompanyID, VehicleID, WarehouseID, DockID, Status, Date, BillID
                             FROM ShipmentINFO.Shipment
                             WHERE ShipmentID = @ShipmentID AND ShipmentStatus ='Departure'";

                    using (SqlCommand cmd = new SqlCommand(query, sqlCon))
                    {
                        cmd.Parameters.AddWithValue("@ShipmentID", shipmentID);

                        using (SqlDataReader reader = cmd.ExecuteReader())
                        {
                            if (reader.Read())
                            {
                                companyID = Convert.ToInt32(reader["CompanyID"]);
                                VehicelID = Convert.ToInt32(reader["VehicleID"]);
                                WarehouseID = Convert.ToInt32(reader["WarehouseID"]);
                                DockID = Convert.ToInt32(reader["DockID"]);

                                CompanyNameFromID(companyID);
                                VehicleNameFromID(VehicelID);
                                WarehouseNameFromID(WarehouseID);
                                DockNameFromID(DockID);


                                cb_OPN_Status.Text = reader["Status"].ToString();
                                Date_OPN.Value = Convert.ToDateTime(reader["Date"]);
                                txt_OrderID.Text = reader["BillID"].ToString();

                                if (int.TryParse(txt_OrderID.Text, out int OrderID))
                                {
                                    DisplayProductsInGridView(OrderID);
                                }
                                else
                                {
                                    MessageBox.Show("Invalid Bill ID.");
                                }
                            }
                            else
                            {
                                MessageBox.Show("Shipment ID not found.");
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show("An error occurred: " + ex.Message);
                }
            }
        }

        private void Btn_OPN_Delete_Click(object sender, EventArgs e)
        {
            if (!int.TryParse(txt_OPN_ID.Text, out int opnNo) || opnNo <= 0)
            {
                MessageBox.Show("Please! Provide Valid OPn ID.");
                return;
            }

            if (!int.TryParse(txt_OrderID.Text, out int Order) || Order <= 0)
            {
                MessageBox.Show("Please! Provide Valid Order ID.");
                return;
            }

            int shipmentID = Convert.ToInt32(txt_OPN_ID.Text);
            int OrderID = Convert.ToInt32(txt_OrderID.Text);



            using (SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB))

            {
                try
                {
                    sqlCon.Open();

                    // Begin a transaction to ensure atomicity of the deletion process
                    SqlTransaction transaction = sqlCon.BeginTransaction();

                    try
                    {
                        // First, delete related BillDetails records
                        string deleteBillDetailsQuery = @"DELETE FROM ProductINFO.BillDetails WHERE BillID = @BillID";
                        SqlCommand deleteBillDetailsCmd = new SqlCommand(deleteBillDetailsQuery, sqlCon, transaction);
                        deleteBillDetailsCmd.Parameters.AddWithValue("@BillID", OrderID);
                        deleteBillDetailsCmd.ExecuteNonQuery();

                        // Then, delete the Shipment record
                        string deleteShipmentQuery = @"DELETE FROM ShipmentINFO.Shipment WHERE ShipmentID = @ShipmentID";
                        SqlCommand deleteShipmentCmd = new SqlCommand(deleteShipmentQuery, sqlCon, transaction);
                        deleteShipmentCmd.Parameters.AddWithValue("@ShipmentID", shipmentID);

                        int rowsAffected = deleteShipmentCmd.ExecuteNonQuery();

                        // Commit the transaction if deletion was successful
                        if (rowsAffected > 0)
                        {
                            transaction.Commit();
                            MessageBox.Show("Shipment and related BillDetails records deleted successfully.");
                            // Clear any text boxes or grid views if needed
                        }
                        else
                        {
                            MessageBox.Show("Shipment deletion failed.");
                            transaction.Rollback(); // Rollback the transaction if deletion failed
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("An error occurred during deletion: " + ex.Message);
                        transaction.Rollback(); // Rollback the transaction on exception
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show("An error occurred: " + ex.Message);
                }
            }
        }

        private void Btn_OPN_Updte_Click(object sender, EventArgs e)
        {
            if (!int.TryParse(txt_OrderID.Text, out int bill) || bill <= 0)
            {
                MessageBox.Show("Please! Provide Valid OPN ID.");
                return;
            }
            if (cb_company_ID.Text == "")
            {
                MessageBox.Show("Please! Provide Company Name.");
                return;
            }
            if (cb_warehouse_ID.Text == "")
            {
                MessageBox.Show("Please! Provide Warehouse Name.");
                return;
            }
            if (cb_dock_ID.Text == "")
            {
                MessageBox.Show("Please! Provide Dock Name.");
                return;
            }
            if (cb_vehicle_ID.Text == "")
            {
                MessageBox.Show("Please! Provide Vehicle Registration No.");
                return;
            }

            string CompanyName = cb_company_ID.Text;
            string WarehouseName = cb_warehouse_ID.Text;
            string VehicelName = cb_vehicle_ID.Text;
            string dockName = cb_dock_ID.Text;


            int companyID = CompanyNametoID(CompanyName);
            int warehouseID = WarehouseNametoID(WarehouseName);
            int vehicleID = VehicleNametoID(VehicelName);
            int dockID = DockNametoID(dockName);


            int opnID = Convert.ToInt32(txt_OPN_ID.Text);
            string opnStatus = cb_OPN_Status.Text;
            int orderID = Convert.ToInt32(txt_OrderID.Text);



            DateTime arrivalDate = Date_OPN.Value.Date;

            using (SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB))
            {
                try
                {
                    sqlCon.Open();

                    string query = @"UPDATE ShipmentINFO.Shipment
                             SET CompanyID = @CompanyID, VehicleID = @VehicleID, WarehouseID = @WarehouseID,
                                 DockID = @DockID, Status = @Status, Date = @Date, BillID = @BillID
                             WHERE ShipmentID = @ShipmentID";

                    SqlCommand cmd = new SqlCommand(query, sqlCon);
                    cmd.Parameters.AddWithValue("@CompanyID", companyID);
                    cmd.Parameters.AddWithValue("@VehicleID", vehicleID);
                    cmd.Parameters.AddWithValue("@WarehouseID", warehouseID);
                    cmd.Parameters.AddWithValue("@DockID", dockID);
                    cmd.Parameters.AddWithValue("@Status", opnStatus);
                    cmd.Parameters.AddWithValue("@Date", arrivalDate);
                    cmd.Parameters.AddWithValue("@BillID", orderID);
                    cmd.Parameters.AddWithValue("@ShipmentID", opnID);

                    int rowsAffected = cmd.ExecuteNonQuery();

                    if (rowsAffected > 0)
                    {
                        MessageBox.Show("OPN updated successfully.");
                        ClearShipmentFields();
                    }
                    else
                    {
                        MessageBox.Show("OPN update failed.");
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show("An error occurred: " + ex.Message);
                }
            }
        }

        private void BtnPrintInvoice_Click_1(object sender, EventArgs e)
        {

            if (txt_OPN_ID.Text == "")
            {
                MessageBox.Show("First View the Documet Info you want to Print.");
                return;
            }
            int shipmentID = Convert.ToInt32(txt_OPN_ID.Text);
            
        }
    }

}