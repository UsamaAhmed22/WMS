using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;

namespace WMS
{

    public partial class ASNForm : Form
    {
        private readonly string connectTo_WMS_DB = @"Data Source=(LocalDB)\MSSQLLocalDB;AttachDbFilename=|DataDirectory|\WMS.mdf;Integrated Security=True";

        public ASNForm()
        {
            InitializeComponent();

            PopulateCompanyComboBox();
            PopulateVehicleComboBox();
            PopulateWarehouseComboBox();
           

        }

        private void ASNForm_Load(object sender, EventArgs e)
        {
            cb_asn_status.Items.Add("At The Way");
            cb_asn_status.Items.Add("At Dock");
            cb_asn_status.Items.Add("At Receiving");
            cb_asn_status.Items.Add("Arrival Complete");
        }

        private void Btn_GoBack_Click(object sender, EventArgs e)
        {
            _ = new WMS_Manager
            {
                Visible = true
            };
            this.Close();
        }

        // Bill ID generated by this button and diplay in the text box
        private void Btn_generateBillID_Click(object sender, EventArgs e)
        {
            SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);
            if (txt_billID.Text !="")
            {
                MessageBox.Show("Please! Commit the Previous Information.");
                return;
            }
            try
            {
                sqlCon.Open();

                // Inserting a dummy record to generate the BillID automatically
                string insertQuery = "INSERT INTO ProductINFO.Bill DEFAULT VALUES; SELECT SCOPE_IDENTITY();";
                SqlCommand cmd = new SqlCommand(insertQuery, sqlCon);

                // Execute the query to get the newly generated BillID
                int generatedBillID = Convert.ToInt32(cmd.ExecuteScalar());

                // Display the generated BillID in the textbox
                txt_billID.Text = generatedBillID.ToString();
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred: " + ex.Message);
            }
            finally
            {
                sqlCon.Close();
            }
        }



        //tocheck the field are not in negative numbers 
        private bool AreFieldsValid()
        {
            if (!int.TryParse(txt_billID.Text, out int billID) || billID < 0)
            {
                MessageBox.Show("Invalid BillID.");
                return false;
            }

            if (cb_product_ID.Text == "")
            {
                MessageBox.Show("Invalid Product Name.");
                return false;
            }

            if (!int.TryParse(txt_product_quantity.Text, out int quantity) || quantity <= 0)
            {
                MessageBox.Show("Invalid Quantity.");
                return false;
            }

            if (!double.TryParse(txt_product_Bill_Extra_Charges.Text, out double extraCharges) || extraCharges < 0)
            {
                MessageBox.Show("Invalid Extra Charges.");
                return false;
            }

            if (!double.TryParse(txt_storage_days.Text, out double storageDays) || storageDays <= 0)
            {
                MessageBox.Show("Invalid Storage Period.");
                return false;
            }

            return true;
        }

        //to check wheather the fields are null or nit
        private bool AreFieldsEmpty()
        {
            return string.IsNullOrWhiteSpace(txt_billID.Text) ||
                   string.IsNullOrWhiteSpace(cb_product_ID.Text) ||
                   string.IsNullOrWhiteSpace(txt_product_quantity.Text) ||
                   string.IsNullOrWhiteSpace(txt_product_Bill_Extra_Charges.Text) ||
                   string.IsNullOrWhiteSpace(txt_storage_days.Text);
        }





        private int ProductNametoID(string productName)
        {
            int productID = 0;  // Initialize the variable

            SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);

            try
            {
                sqlCon.Open();

                string query = "SELECT ProductID FROM ProductINFO.Products WHERE Name = @name";
                SqlCommand cmd = new SqlCommand(query, sqlCon);
                cmd.Parameters.AddWithValue("@name", productName);
                SqlDataReader reader = cmd.ExecuteReader();

                if (reader.Read()) // Check if there's a row returned
                {
                    productID = Convert.ToInt32(reader["ProductID"]); // Assign the retrieved ID
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred while fetching Product data: " + ex.Message);
            }
            finally
            {
                sqlCon.Close();
            }

            return productID;
        }


        // ADD the new product to BillDetails table
        private void Btn_product_ADD_Click(object sender, EventArgs e)
        {
            if (AreFieldsEmpty() || !AreFieldsValid())
            {
                MessageBox.Show("Please fill in all fields with valid values.");
                return;
            }

            // Get the BillID from the textbox
            if (!int.TryParse(txt_billID.Text, out int billID))
            {
                MessageBox.Show("Invalid BillID.");
                return;
            }


            int productID = ProductNametoID(cb_product_ID.Text);
            int quantity = Convert.ToInt32(txt_product_quantity.Text);
            double extraCharges = Convert.ToDouble(txt_product_Bill_Extra_Charges.Text);
            int totalDays = Convert.ToInt32(txt_storage_days.Text);
            double totalStorageCharges = quantity * GetOneDayRateFromDB(productID) * totalDays;

            double AreaOccupy = (GetProductArea(productID) ) * quantity;

            SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);

            try
            {
                sqlCon.Open();

                string query = @"INSERT INTO ProductINFO.BillDetails (BillID, ProductID, Quantity, ExtraCharges,StorageDays, TotalStorageCharges, OccupyArea)
                         VALUES (@BillID, @ProductID, @Quantity, @ExtraCharges,@StorageDays, @TotalStorageCharges, @AreaOccupy)";

                SqlCommand cmd = new SqlCommand(query, sqlCon);
                cmd.Parameters.AddWithValue("@BillID", billID);
                cmd.Parameters.AddWithValue("@ProductID", productID);
                cmd.Parameters.AddWithValue("@Quantity", quantity);
                cmd.Parameters.AddWithValue("@ExtraCharges", extraCharges);
                cmd.Parameters.AddWithValue("@StorageDays", totalDays);
                cmd.Parameters.AddWithValue("@TotalStorageCharges", totalStorageCharges);
                cmd.Parameters.AddWithValue("@AreaOccupy", AreaOccupy);

                int rowsAffected = cmd.ExecuteNonQuery();

                if (rowsAffected > 0)
                {
                    MessageBox.Show("Product added to BillDetails successfully.");
                    ClearProductDetailsFields(); // Clear the input fields after successful addition
                    DisplayProductsInGridView(billID); // Update DataGridView with added product
                }
                else
                {
                    MessageBox.Show("Failed to add product to BillDetails.");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred: " + ex.Message);
            }
            finally
            {
                sqlCon.Close();
            }
        }
        // Product rate for one day from Products table
        private double GetOneDayRateFromDB(int productID)
        {
            double oneDayRate = 0;

            // Assuming connectTo_WMS_DB is your connection string
            using (SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB))
            {
                try
                {
                    sqlCon.Open();

                    string query = "SELECT OneDayRate FROM ProductINFO.Products WHERE ProductID = @ProductID";
                    SqlCommand cmd = new SqlCommand(query, sqlCon);
                    cmd.Parameters.AddWithValue("@ProductID", productID);

                    object result = cmd.ExecuteScalar();
                    if (result != null)
                    {
                        oneDayRate = Convert.ToDouble(result);
                    }
                }
                catch (Exception ex)
                {
                    // Handle exceptions here
                    Console.WriteLine("An error occurred while fetching one day rate: " + ex.Message);
                }
            }

            return oneDayRate;
        }

        // this function return area of products by taking the ProductID
        private float GetProductArea(int productID)
        {
            float area = 0;

            string connectionString = connectTo_WMS_DB; // Replace with your connection string
            string query = "SELECT AreaCmSq FROM ProductINFO.Products WHERE ProductID = @ProductID";

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@ProductID", productID);

                    try
                    {
                        connection.Open();
                        var result = command.ExecuteScalar();
                        if (result != null && result != DBNull.Value)
                        {
                            area = Convert.ToSingle(result);
                        }
                    }
                    catch (Exception ex)
                    {
                        // Handle exception
                        Console.WriteLine("An error occurred: " + ex.Message);
                    }
                }
            }

            return area;
        }



        // Helper function to display products in DataGridView after adding to BillDetails
        private void DisplayProductsInGridView(int billID)
        {
            SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);
            DataTable dataTable = new DataTable();

            try
            {
                sqlCon.Open();

                string query = @"SELECT P.Name AS ProductName, BD.Quantity, BD.ExtraCharges, BD.StorageDays, BD.TotalStorageCharges
                                FROM ProductINFO.BillDetails BD
                                INNER JOIN ProductINFO.Products P ON BD.ProductID = P.ProductID
                                WHERE BD.BillID = @BillID ";

                SqlCommand cmd = new SqlCommand(query, sqlCon);
                cmd.Parameters.AddWithValue("@BillID", billID);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dataTable);

                grid_product_bill.DataSource = dataTable; // Assuming grid_product_bill is your DataGridView name
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred while fetching products: " + ex.Message);
            }
            finally
            {
                sqlCon.Close();
            }
        }





        // Helper function to clear input fields after adding product to BillDetails
        private void ClearProductDetailsFields()
        {
            cb_product_ID.Text = "";
            txt_product_quantity.Text = "";
            txt_product_Bill_Extra_Charges.Text = "";
            txt_storage_days.Text = "";
        }





        // function for UPDATE product Bill Id and Product ID from Bill details table
        private void Btn_product_Update_Click(object sender, EventArgs e)
        {
            if (!int.TryParse(txt_billID.Text, out int billID))
            {
                MessageBox.Show("Invalid BillID.");
                return;
            }

            int productID = ProductNametoID(cb_product_ID.Text);
            int quantity = Convert.ToInt32(txt_product_quantity.Text);
            double extraCharges = Convert.ToDouble(txt_product_Bill_Extra_Charges.Text);
            int totalDays = Convert.ToInt32(txt_storage_days.Text);
            double totalStorageCharges = quantity * GetOneDayRateFromDB(productID) * totalDays;
            double AreaOccupy = (GetProductArea(productID)) * quantity;


            if (UpdateProductInBillDetails(billID, productID, quantity, extraCharges, totalDays, totalStorageCharges, AreaOccupy))
            {
                MessageBox.Show("Product updated successfully.");
                DisplayProductsInGridView(billID); // Update DataGridView after updating
            }
            else
            {
                MessageBox.Show("Failed to update product in BillDetails.");
            }
        }

        // Function to update Quantity and Extra Charges for a product in BillDetails table
        private bool UpdateProductInBillDetails(int billID, int productID, int quantity, double extraCharges,int totalDays, double totalStorageCharges, double AreaOccupy)
        {
            SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);

            try
            {
                sqlCon.Open();

                string query = @"UPDATE ProductINFO.BillDetails 
                         SET Quantity = @Quantity, ExtraCharges = @ExtraCharges ,StorageDays = @StorageDays, TotalStorageCharges = @TotalStorageCharges, OccupyArea = @AreaOccupy
                         WHERE BillID = @BillID AND ProductID = @ProductID";

                SqlCommand cmd = new SqlCommand(query, sqlCon);
                cmd.Parameters.AddWithValue("@Quantity", quantity);
                cmd.Parameters.AddWithValue("@ExtraCharges", extraCharges);
                cmd.Parameters.AddWithValue("@StorageDays", totalDays);
                cmd.Parameters.AddWithValue("@TotalStorageCharges", totalStorageCharges);
                cmd.Parameters.AddWithValue("@BillID", billID);
                cmd.Parameters.AddWithValue("@ProductID", productID);
                cmd.Parameters.AddWithValue("@AreaOccupy", AreaOccupy);


                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected > 0;
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred: " + ex.Message);
                return false;
            }
            finally
            {
                sqlCon.Close();
            }
        }






        // function for DELETE product to Bill ID and Product ID From Bill Details 
        private void Btn_product_DELETE_Click(object sender, EventArgs e)
        {
            if (!int.TryParse(txt_billID.Text, out int billID))
            {
                MessageBox.Show("Invalid BillID.");
                return;
            }
            if (cb_product_ID.Text =="")
            {
                MessageBox.Show("Invalid Product Names.");
                return;
            }

            if (DeleteProductFromBillDetails(billID, ProductNametoID(cb_product_ID.Text)))
            {
                MessageBox.Show("Product deleted successfully.");
                DisplayProductsInGridView(billID); // Update DataGridView after deletion
            }
            else
            {
                MessageBox.Show("Failed to delete product from BillDetails.");
            }
        }

        // Function to delete product from BillDetails table
        private bool DeleteProductFromBillDetails(int billID, int productID)
        {
            SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);

            try
            {
                sqlCon.Open();

                string query = @"DELETE FROM ProductINFO.BillDetails WHERE BillID = @BillID AND ProductID = @ProductID";

                SqlCommand cmd = new SqlCommand(query, sqlCon);
                cmd.Parameters.AddWithValue("@BillID", billID);
                cmd.Parameters.AddWithValue("@ProductID", productID);

                int rowsAffected = cmd.ExecuteNonQuery();

                return rowsAffected > 0;
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred: " + ex.Message);
                return false;
            }
            finally
            {
                sqlCon.Close();
            }
        }





        //  function for VIEW product to Bill ID and Product ID from Bill Details Table
        private void Btn_product_VIEW_Click(object sender, EventArgs e)
        {
            
            if (!int.TryParse(txt_billID.Text, out int billID))
            {
                MessageBox.Show("Invalid BillID.");
                return;
            }
            if (cb_product_ID.Text =="")
            {
                MessageBox.Show("Invalid Product Name.");
                return;
            }
            ViewProductDetails(billID, ProductNametoID(cb_product_ID.Text));
        }

        // Function to view product details
        private void ViewProductDetails(int billID, int productID)
        {
            SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);

            try
            {
                sqlCon.Open();

                string query = @"SELECT Quantity, ExtraCharges, StorageDays FROM ProductINFO.BillDetails 
                        WHERE BillID = @BillID AND ProductID = @ProductID";

                SqlCommand cmd = new SqlCommand(query, sqlCon);
                cmd.Parameters.AddWithValue("@BillID", billID);
                cmd.Parameters.AddWithValue("@ProductID", productID);

                SqlDataReader reader = cmd.ExecuteReader();

                if (reader.Read())
                {
                    // Display the product details in text boxes
                    txt_product_quantity.Text = reader["Quantity"].ToString();
                    txt_product_Bill_Extra_Charges.Text = reader["ExtraCharges"].ToString();
                    txt_storage_days.Text = reader["StorageDays"].ToString();

                }
                else
                {
                    MessageBox.Show("Product details not found.");
                    ClearProductDetailsFields(); // Clear text boxes if product details are not found
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred: " + ex.Message);
            }
            finally
            {
                sqlCon.Close();
            }
        }















        // <-------------------------- Functions for populating the results from dataabse -------------------------------->


        // these methods for fetchin results from database in the realtive combo boxes
        private void PopulateCompanyComboBox()
    {
        SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);

        try
        {
            sqlCon.Open();

            string query = "SELECT DISTINCT Name FROM ShipmentINFO.Company";
            SqlCommand cmd = new SqlCommand(query, sqlCon);
            SqlDataReader reader = cmd.ExecuteReader();

            while (reader.Read())
            {
                cb_comp_ID.Items.Add(reader["Name"].ToString());
            }

            reader.Close();
        }
        catch (Exception ex)
        {
            MessageBox.Show("An error occurred while fetching company data: " + ex.Message);
        }
        finally
        {
            sqlCon.Close();
        }
    }

        private void PopulateVehicleComboBox()
        {
            SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);

            try
            {
                sqlCon.Open();

                string query = "SELECT DISTINCT RegistrationNo FROM ShipmentINFO.Vehicle";
                SqlCommand cmd = new SqlCommand(query, sqlCon);
                SqlDataReader reader = cmd.ExecuteReader();

                while (reader.Read())
                {
                    cb_vehicle_ID.Items.Add(reader["RegistrationNo"].ToString());
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred while fetching vehicle data: " + ex.Message);
            }
            finally
            {
                sqlCon.Close();
            }
        }

        private void PopulateWarehouseComboBox()
        {
            SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);

            try
            {
                sqlCon.Open();

                string query = "SELECT DISTINCT Name FROM WareHouseINFO.Warehouse";
                SqlCommand cmd = new SqlCommand(query, sqlCon);
                SqlDataReader reader = cmd.ExecuteReader();

                while (reader.Read())
                {
                    cb_warehouse_ID.Items.Add(reader["Name"].ToString());
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred while fetching warehouse data: " + ex.Message);
            }
            finally
            {
                sqlCon.Close();
            }
        }

        //for fetching realted warehouse dock
        private void PopulateDockComboBox(int warehouseID)
        {
            cb_dock_ID.Items.Clear(); // Clear existing items

            SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);

            try
            {
                sqlCon.Open();

                string query = "SELECT Name FROM WareHouseINFO.Dock WHERE WarehouseID = @WarehouseID";
                SqlCommand cmd = new SqlCommand(query, sqlCon);
                cmd.Parameters.AddWithValue("@WarehouseID", warehouseID);
                SqlDataReader reader = cmd.ExecuteReader();

                while (reader.Read())
                {
                    cb_dock_ID.Items.Add(reader["Name"].ToString());
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred while fetching dock data: " + ex.Message);
            }
            finally
            {
                sqlCon.Close();
            }
        }

        private void Cb_warehouse_ID_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cb_warehouse_ID.SelectedItem != null)
            {
                string warehouseName = cb_warehouse_ID.Text;
                int selectedWarehouseID = 0;  // Initialize the variable

                SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);

                try
                {
                    sqlCon.Open();

                    string query = "SELECT WarehouseID FROM WareHouseINFO.Warehouse WHERE Name = @name";
                    SqlCommand cmd = new SqlCommand(query, sqlCon);
                    cmd.Parameters.AddWithValue("@name", warehouseName);
                    SqlDataReader reader = cmd.ExecuteReader();

                    // Check if the reader has rows
                    if (reader.HasRows)
                    {
                        // Assuming the query returns a single result for the warehouse name
                        reader.Read();
                        selectedWarehouseID = Convert.ToInt32(reader["WarehouseID"]); // Assign the retrieved ID
                    }

                    reader.Close();
                }
                catch (Exception ex)
                {
                    MessageBox.Show("An error occurred while fetching Warehouse data: " + ex.Message);
                }
                finally
                {
                    sqlCon.Close();
                }

                // Pass the selectedWarehouseID to populate the Dock ComboBox
                PopulateDockComboBox(selectedWarehouseID);
            }
        }





        // for fetching realted company products
        private void Cb_comp_ID_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cb_comp_ID.SelectedItem != null)
            {
                string CompanyName = cb_comp_ID.Text;


                // Pass the selectedCopmanyID to populate the Product ComboBox
                PopulateProductComboBox(CompanyName);
            }
            
        }

        private void PopulateProductComboBox(string companyName)
        {
            SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);

            try
            {
                sqlCon.Open();

                // Fetch products based on the selected company ID
                string query = "SELECT Name FROM ProductINFO.Products WHERE CompanyName = @companyName";
                SqlCommand cmd = new SqlCommand(query, sqlCon);
                cmd.Parameters.AddWithValue("@companyName", companyName);

                SqlDataReader reader = cmd.ExecuteReader();

                while (reader.Read())
                {
                    cb_product_ID.Items.Add(reader["Name"].ToString());
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred while fetching product data: " + ex.Message);
            }
            finally
            {
                sqlCon.Close();
            }
            // these for trigered for selecting the output from combo box and their respected products of the selected company
        }




        private void CompanyNameFromID(int companyID)
        {
            SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);

            try
            {
                sqlCon.Open();

                string Query = @"SELECT Name FROM ShipmentINFO.Company WHERE CompanyID = @companyID";
                

                SqlCommand cmd = new SqlCommand(Query, sqlCon);
                cmd.Parameters.AddWithValue("@companyID", companyID);

                SqlDataReader reader = cmd.ExecuteReader();

                if (reader.Read())
                {
                    cb_comp_ID.Text = reader["Name"].ToString();
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred: " + ex.Message);
            }
            finally
            {
                sqlCon.Close();
            }
        }
        private void VehicleNameFromID(int vehicleID)
        {
            SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);

            try
            {
                sqlCon.Open();

                string Query = @"SELECT RegistrationNo FROM ShipmentINFO.Vehicle WHERE VehicleID = @vehicleID";


                SqlCommand cmd = new SqlCommand(Query, sqlCon);
                cmd.Parameters.AddWithValue("@vehicleID", vehicleID);

                SqlDataReader reader = cmd.ExecuteReader();

                if (reader.Read())
                {
                    cb_vehicle_ID.Text = reader["RegistrationNo"].ToString();
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred: " + ex.Message);
            }
            finally
            {
                sqlCon.Close();
            }
        }
        private void WarehouseNameFromID(int warehouseID)
        {
            SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);

            try
            {
                sqlCon.Open();

                string Query = @"SELECT Name FROM WarehouseINFO.Warehouse WHERE WarehouseID = @warehouseID";


                SqlCommand cmd = new SqlCommand(Query, sqlCon);
                cmd.Parameters.AddWithValue("@warehouseID", warehouseID);

                SqlDataReader reader = cmd.ExecuteReader();

                if (reader.Read())
                {
                    cb_warehouse_ID.Text = reader["Name"].ToString();
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred: " + ex.Message);
            }
            finally
            {
                sqlCon.Close();
            }
        }
        private void DockNameFromID(int dockID)
        {
            SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);

            try
            {
                sqlCon.Open();

                string Query = @"SELECT Name FROM WarehouseINFO.Dock WHERE DockID = @dockID";


                SqlCommand cmd = new SqlCommand(Query, sqlCon);
                cmd.Parameters.AddWithValue("@dockID", dockID);

                SqlDataReader reader = cmd.ExecuteReader();

                if (reader.Read())
                {
                    cb_dock_ID.Text = reader["Name"].ToString();
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred: " + ex.Message);
            }
            finally
            {
                sqlCon.Close();
            }
        }


        
        //Perform operations on ASN 
        private void Btn_Asn_View_Click(object sender, EventArgs e)
        {

            int companyID , VehicelID , WarehouseID, DockID;

            if(!int.TryParse(txt_ASN_No.Text, out int asnNo) || asnNo <= 0)
            {
                MessageBox.Show("Please! Provide Valid ID.");
                return;
            }

            int shipmentID = Convert.ToInt32(txt_ASN_No.Text);

            SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);

            try
            {
                sqlCon.Open();

                string query = @"SELECT CompanyID, VehicleID, WarehouseID, DockID, Status, Date, BillID
                         FROM ShipmentINFO.Shipment
                         WHERE ShipmentID = @ShipmentID AND ShipmentStatus = 'Arrival'";

                SqlCommand cmd = new SqlCommand(query, sqlCon);
                cmd.Parameters.AddWithValue("@ShipmentID", shipmentID);

                SqlDataReader reader = cmd.ExecuteReader();

                if (reader.Read())
                {
                    // Display fetched data in respective text boxes
                    companyID = Convert.ToInt32(reader["CompanyID"]);
                    VehicelID = Convert.ToInt32(reader["VehicleID"]);
                    WarehouseID = Convert.ToInt32(reader["WarehouseID"]);
                    DockID = Convert.ToInt32(reader["DockID"]);

                    CompanyNameFromID(companyID);
                    VehicleNameFromID(VehicelID);
                    WarehouseNameFromID(WarehouseID);
                    DockNameFromID(DockID);

                    cb_asn_status.Text = reader["Status"].ToString();
                    date_ASN_arrival.Value = Convert.ToDateTime(reader["Date"]);
                    txt_billID.Text = reader["BillID"].ToString();

                    // Display data related to the BillID in the DataGridView
                    int billID = Convert.ToInt32(txt_billID.Text);
                    DisplayProductsInGridView(billID);
                }
                else
                {
                    MessageBox.Show("Shipment ID not found.");
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred: " + ex.Message);
            }
            finally
            {
                sqlCon.Close();
            }
        }




        private int CompanyNametoID(string companyName)
        {
            int companyID = 0;  // Initialize the variable

            SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);

            try
            {
                sqlCon.Open();

                string query = "SELECT CompanyID FROM ShipmentINFO.Company WHERE Name = @name";
                SqlCommand cmd = new SqlCommand(query, sqlCon);
                cmd.Parameters.AddWithValue("@name", companyName);
                SqlDataReader reader = cmd.ExecuteReader();

                if (reader.Read()) // Check if there's a row returned
                {
                    companyID = Convert.ToInt32(reader["CompanyID"]); // Assign the retrieved ID
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred while fetching Company data: " + ex.Message);
            }
            finally
            {
                sqlCon.Close();
            }

            return companyID;
        }
        private int VehicleNametoID(string vehicleReg)
        {
            int VehicleID = 0;  // Initialize the variable

            SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);

            try
            {
                sqlCon.Open();

                string query = "SELECT VehicleID FROM ShipmentINFO.Vehicle WHERE RegistrationNo = @vehicleReg";
                SqlCommand cmd = new SqlCommand(query, sqlCon);
                cmd.Parameters.AddWithValue("@vehicleReg", vehicleReg);
                SqlDataReader reader = cmd.ExecuteReader();

                if (reader.Read()) // Check if there's a row returned
                {
                    VehicleID = Convert.ToInt32(reader["VehicleID"]); // Assign the retrieved ID
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred while fetching Vehicle data: " + ex.Message);
            }
            finally
            {
                sqlCon.Close();
            }

            return VehicleID;
        }
        private int WarehouseNametoID(string warehouseName)
        {
            int warehouseID = 0;  // Initialize the variable

            SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);

            try
            {
                sqlCon.Open();

                string query = "SELECT WarehouseID FROM WarehouseINFO.Warehouse WHERE Name = @warehouseName";
                SqlCommand cmd = new SqlCommand(query, sqlCon);
                cmd.Parameters.AddWithValue("@warehouseName", warehouseName);
                SqlDataReader reader = cmd.ExecuteReader();

                if (reader.Read()) // Check if there's a row returned
                {
                    warehouseID = Convert.ToInt32(reader["WarehouseID"]); // Assign the retrieved ID
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred while fetching Warehouse data: " + ex.Message);
            }
            finally
            {
                sqlCon.Close();
            }

            return warehouseID;
        }
        private int DockNametoID(string dockName)
        {
            int dockID = 0;  // Initialize the variable

            SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);

            try
            {
                sqlCon.Open();

                string query = "SELECT DockID FROM WarehouseINFO.Dock WHERE Name = @dockName";
                SqlCommand cmd = new SqlCommand(query, sqlCon);
                cmd.Parameters.AddWithValue("@dockName", dockName);
                SqlDataReader reader = cmd.ExecuteReader();

                if (reader.Read()) // Check if there's a row returned
                {
                    dockID = Convert.ToInt32(reader["DockID"]); // Assign the retrieved ID
                }

                reader.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred while fetching Dock data: " + ex.Message);
            }
            finally
            {
                sqlCon.Close();
            }

            return dockID;
        }




        //for adding the new Arrival shipment 
        private void Btn_Asn_Add_Click(object sender, EventArgs e)
        {

            if (!int.TryParse(txt_billID.Text, out int bill) || bill <= 0)
            {
                MessageBox.Show("Please! Provide Valid ASN ID.");
                return;
            }
            if (cb_comp_ID.Text =="")
            {
                MessageBox.Show("Please! Provide Company Name.");
                return;
            }
            if (cb_warehouse_ID.Text == "")
            {
                MessageBox.Show("Please! Provide Warehouse Name.");
                return;
            }
            if (cb_dock_ID.Text == "")
            {
                MessageBox.Show("Please! Provide Dock Name.");
                return;
            }
            if (cb_vehicle_ID.Text == "")
            {
                MessageBox.Show("Please! Provide Vehicle Registration No.");
                return;
            }


            string CompanyName = cb_comp_ID.Text;
            string WarehouseName = cb_warehouse_ID.Text;
            string VehicelName = cb_vehicle_ID.Text;
            string dockName = cb_dock_ID.Text;


            int companyID = CompanyNametoID(CompanyName);
            int warehouseID = WarehouseNametoID(WarehouseName);
            int vehicleID = VehicleNametoID(VehicelName);
            int dockID = DockNametoID(dockName);

            int billID = Convert.ToInt32(txt_billID.Text);

            DateTime arrivalDate = date_ASN_arrival.Value.Date;
            
            string shipmentStatus = "Arrival"; // Set the shipment status
            string status = "At The Way"; // Set the status

            SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);

            try
            {
                sqlCon.Open();

                string query = @"INSERT INTO ShipmentINFO.Shipment 
                         (CompanyID, WarehouseID, VehicleID, BillID, Date, ShipmentStatus, Status, DockID) 
                         VALUES (@CompanyID, @WarehouseID, @VehicleID, @BillID, @Date, @ShipmentStatus, @Status, @DockID)";

                SqlCommand cmd = new SqlCommand(query, sqlCon);
                cmd.Parameters.AddWithValue("@CompanyID", companyID);
                cmd.Parameters.AddWithValue("@WarehouseID", warehouseID);
                cmd.Parameters.AddWithValue("@VehicleID", vehicleID);
                cmd.Parameters.AddWithValue("@BillID", billID);
                cmd.Parameters.AddWithValue("@Date", arrivalDate);
                cmd.Parameters.AddWithValue("@ShipmentStatus", shipmentStatus);
                cmd.Parameters.AddWithValue("@Status", status);
                cmd.Parameters.AddWithValue("@DockID", dockID);

                int rowsAffected = cmd.ExecuteNonQuery();

                if (rowsAffected > 0)
                {
                    MessageBox.Show("ASN details added successfully.");
                    // Clear input fields after successful addition
                    ClearShipmentFields();
                }
                else
                {
                    MessageBox.Show("Failed to add ASN details.");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred: " + ex.Message);
            }
            finally
            {
                sqlCon.Close();
            }
        }

        private void Btn_Asn_Updte_Click(object sender, EventArgs e)
        {
            if (!int.TryParse(txt_billID.Text, out int bill) || bill <= 0)
            {
                MessageBox.Show("Please! Provide Valid ASN ID.");
                return;
            }
            if (cb_comp_ID.Text == "")
            {
                MessageBox.Show("Please! Provide Company Name.");
                return;
            }
            if (cb_warehouse_ID.Text == "")
            {
                MessageBox.Show("Please! Provide Warehouse Name.");
                return;
            }
            if (cb_dock_ID.Text == "")
            {
                MessageBox.Show("Please! Provide Dock Name.");
                return;
            }
            if (cb_vehicle_ID.Text == "")
            {
                MessageBox.Show("Please! Provide Vehicle Registration No.");
                return;
            }

            string CompanyName = cb_comp_ID.Text;
            string WarehouseName = cb_warehouse_ID.Text;
            string VehicelName = cb_vehicle_ID.Text;
            string dockName = cb_dock_ID.Text;


            int companyID = CompanyNametoID(CompanyName);
            int warehouseID = WarehouseNametoID(WarehouseName);
            int vehicleID = VehicleNametoID(VehicelName);
            int dockID = DockNametoID(dockName);


            int shipmentID = Convert.ToInt32(txt_ASN_No.Text);
            string asnStatus = cb_asn_status.Text;
            DateTime arrivalDate = date_ASN_arrival.Value.Date;
            int billID = Convert.ToInt32(txt_billID.Text);

            SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);

            try
            {
                sqlCon.Open();

                string query = @"UPDATE ShipmentINFO.Shipment
                         SET CompanyID = @CompanyID, VehicleID = @VehicleID, WarehouseID = @WarehouseID,
                             DockID = @DockID, Status = @Status, Date = @Date, BillID = @BillID
                         WHERE ShipmentID = @ShipmentID";

                SqlCommand cmd = new SqlCommand(query, sqlCon);
                cmd.Parameters.AddWithValue("@CompanyID", companyID);
                cmd.Parameters.AddWithValue("@VehicleID", vehicleID);
                cmd.Parameters.AddWithValue("@WarehouseID", warehouseID);
                cmd.Parameters.AddWithValue("@DockID", dockID);
                cmd.Parameters.AddWithValue("@Status", asnStatus);
                cmd.Parameters.AddWithValue("@Date", arrivalDate);
                cmd.Parameters.AddWithValue("@BillID", billID);
                cmd.Parameters.AddWithValue("@ShipmentID", shipmentID);

                int rowsAffected = cmd.ExecuteNonQuery();

                if (rowsAffected > 0)
                {
                    MessageBox.Show("ASN updated successfully.");
                    ClearShipmentFields();
                }
                else
                {
                    MessageBox.Show("ASN update failed.");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred: " + ex.Message);
            }
            finally
            {
                sqlCon.Close();
            }
        }


        private void Btn_Asn_Delete_Click(object sender, EventArgs e)
        {
            if (!int.TryParse(txt_ASN_No.Text, out int asnNo) || asnNo <= 0)
            {
                MessageBox.Show("Please! Provide Valid ASN ID.");
                return;
            }

            if (!int.TryParse(txt_billID.Text, out int bill) || bill <= 0)
            {
                MessageBox.Show("Please! Provide Valid Bill ID.");
                return;
            }

           

            int shipmentID = Convert.ToInt32(txt_ASN_No.Text);
            int billID = Convert.ToInt32(txt_billID.Text);

            SqlConnection sqlCon = new SqlConnection(connectTo_WMS_DB);

            try
            {
                sqlCon.Open();

                // First, delete related BillDetails records
                string deleteBillDetailsQuery = @"DELETE FROM ProductINFO.BillDetails WHERE BillID = @BillID";
                SqlCommand deleteBillDetailsCmd = new SqlCommand(deleteBillDetailsQuery, sqlCon);
                deleteBillDetailsCmd.Parameters.AddWithValue("@BillID", billID);
                deleteBillDetailsCmd.ExecuteNonQuery();

                // Then, delete the Shipment record
                string deleteShipmentQuery = @"DELETE FROM ShipmentINFO.Shipment WHERE ShipmentID = @ShipmentID";
                SqlCommand deleteShipmentCmd = new SqlCommand(deleteShipmentQuery, sqlCon);
                deleteShipmentCmd.Parameters.AddWithValue("@ShipmentID", shipmentID);

                int rowsAffected = deleteShipmentCmd.ExecuteNonQuery();

                if (rowsAffected > 0)
                {
                    MessageBox.Show("Shipment and related BillDetails records deleted successfully.");
                    // Clear any text boxes or grid views if needed
                }
                else
                {
                    MessageBox.Show("Shipment deletion failed.");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred: " + ex.Message);
            }
            finally
            {
                sqlCon.Close();
            }
        }


        // to clear all the fields 
        private void ClearShipmentFields()
        {
            cb_asn_status.SelectedIndex = -1;
            cb_comp_ID.SelectedIndex = -1;
            cb_warehouse_ID.SelectedIndex = -1;
            cb_vehicle_ID.SelectedIndex = -1;
            txt_billID.Text = "";
            date_ASN_arrival.Value = DateTime.Now;
            cb_dock_ID.SelectedIndex = -1;
            grid_product_bill.DataSource = null;
        }




        private void BtnPrintInvoice_Click(object sender, EventArgs e)
        {
            if(txt_ASN_No.Text == "")
            {
                MessageBox.Show("First View the Documet Info you want to Print.");
                return;
            }
            int shipmentID = Convert.ToInt32(txt_ASN_No.Text);
            
        }
    }


}
